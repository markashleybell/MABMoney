@model MABMoney.Web.Models.Home.IndexViewModel
@using MABMoney.Web.Models.Home
@using MABMoney.Services.DTO;

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/Master.cshtml";
}

@if(Model.Debug != null) {
<div class="row">
    <div class="span12">@Model.Debug</div>
</div>
}

<div class="row">
    <div class="span4">
        @*@Model.From.ToString("dd/MM/yyyy")-@Model.To.ToString("dd/MM/yyyy")*@
        @using (Html.BeginForm("", "Home", FormMethod.Post, new { id = "account-selector", @class = "form-inline" })) {
            <p>@Html.DropDownListFor(x => x.Account_AccountID, Model.Accounts, new { @class = "account-selector" }) </p>
            <noscript><input type="submit" class="btn" value="Go" /></noscript>
        }

        @using (Html.BeginForm("", "Home", FormMethod.Post, new { id = "account-selector-mobile", @class = "form-inline" })) {
            <p>@Html.DropDownListFor(x => x.Account_AccountID, Model.AccountsWithBalances, new { @class = "account-selector" }) </p>
            <noscript><input type="submit" class="btn" value="Go" /></noscript>
        }

    </div> 
    <div class="span8" id="current-balance"><div class="heading-mimic">@Model.Account.CurrentBalance.ToString("c")</div></div>
</div>



@*<p>Starting Balance: @Model.Account.StartingBalance.ToString("#0.00"), Current Balance: @Model.Account.CurrentBalance.ToString("#0.00")</p>*@

@*<div class="row" id="test">
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
</div>*@

<ul class="nav nav-tabs lge" id="nav-tabs">

    @if(Model.Account.Type == AccountTypeDTO.Current) {
    <li @Html.Raw((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? "class=\"active\"" : "")><a href="#budget" data-toggle="tab">Budget<span></span></a></li>
    }
    @if (Model.Account.Type == AccountTypeDTO.CreditCard || Model.Account.Type == AccountTypeDTO.Loan) {
    <li @Html.Raw((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? "class=\"active\"" : "")><a href="#payment-calculator" data-toggle="tab">Payment Calculator</a></li>
    }

    <li @Html.Raw((Model.Tab == DashboardTab.Income) ? "class=\"active\"" : "")><a href="#income" data-toggle="tab">Income<span>: @Model.Transactions.Where(t => t.Amount > 0 && t.Date >= Model.From).Sum(x => x.Amount)</span></a></li>
    <li @Html.Raw((Model.Tab == DashboardTab.Expenses) ? "class=\"active\"" : "")><a href="#expenses" data-toggle="tab">Expense<span>s: @Model.Transactions.Where(t => t.Amount < 0 && t.Date >= Model.From).Sum(x => Math.Abs(x.Amount))</span></a></li>
    <li @Html.Raw((Model.Tab == DashboardTab.Transfers) ? "class=\"active\"" : "")><a href="#transfers" data-toggle="tab">Transfer<span>s: @Model.Transactions.Where(t => t.TransferGUID != null && t.Date >= Model.From).Sum(x => x.Amount)</span></a></li>
    
</ul>

<div class="row" id="mobile-tab-select">
    <div class="span12">
        <select>
            
            @if(Model.Account.Type == AccountTypeDTO.Current) {
            <option @Html.Raw((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? "class=\"active\"" : "") value="#budget">Budget @((Model.Budget != null) ? Model.Budget.Start.ToString("dd/MM/yy") + " - " + Model.Budget.End.ToString("dd/MM/yy") : "")</option>
            }
            @if (Model.Account.Type == AccountTypeDTO.CreditCard || Model.Account.Type == AccountTypeDTO.Loan) {
            <option @Html.Raw((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? "class=\"active\"" : "") value="#payment-calculator">Payment Calculator</option>
            }

            <option @Html.Raw((Model.Tab == DashboardTab.Income) ? "selected=\"selected\"" : "") value="#income">Income: @Model.Transactions.Where(t => t.Amount > 0 && t.Date >= Model.From).Sum(x => x.Amount)</option>
            <option @Html.Raw((Model.Tab == DashboardTab.Expenses) ? "selected=\"selected\"" : "") value="#expenses">Expenses: @Model.Transactions.Where(t => t.Amount < 0 && t.Date >= Model.From).Sum(x => Math.Abs(x.Amount))</option>
            <option @Html.Raw((Model.Tab == DashboardTab.Transfers) ? "selected=\"selected\"" : "") value="#transfers">Transfers: @Model.Transactions.Where(t => t.TransferGUID != null && t.Date >= Model.From).Sum(x => x.Amount)</option>

        </select>
    </div> 
</div>

<div class="tab-content">

    <!-- BEGIN INCOME TAB -->

    <div class="tab-pane@((Model.Tab == DashboardTab.Income) ? " active" : "")" id="income">

        <h2>@((Model.Budget != null) ? Model.Budget.Start.ToString("dd/MM/yy") + " - " + Model.Budget.End.ToString("dd/MM/yy") : "")</h2>

        @using (Html.BeginForm("CreateTransaction", "Home")) {
            <div class="row">
                <div class="span2">@Html.EditorFor(x => x.Date, new { @class = "input-block-level", placeholder = "Date" })</div>
                <div class="span2">@Html.DropDownListFor(x => x.Category_CategoryID, Model.IncomeCategories, "Category...", new { @class = "input-block-level" })</div>
                <div class="span4">@Html.TextBoxFor(x => x.Description, new { @class = "typeahead input-block-level", placeholder = "Description (optional)", autocomplete = "off" })</div>
                <div class="span2">@Html.TextBoxFor(x => x.Amount, new { @class = "input-block-level", placeholder = "Amount" })</div>   
                <div class="span2">
                    <input type="submit" value="Add Income" class="btn btn-primary btn-fullwidth" />
                </div>
                @Html.HiddenFor(x => x.Account_AccountID)
                <input data-val="true" data-val-required="The Type field is required." name="Type" type="hidden" value="Income">
            </div>
        }
        @{
            var incomeTransactions = Model.Transactions.Where(t => t.Amount > 0).OrderByDescending(x => x.Date).ThenByDescending(x => x.TransactionID).Take(10);
        }
        @if (incomeTransactions.Count() > 0) {
            
            <table class="table table-striped">
                <caption>Transaction List</caption>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th class="edit-column">Edit</th>
                    </tr>
                </thead>
                <tbody>
                
                    @foreach (var transaction in incomeTransactions) {
                    <tr@((transaction.Date < Model.From) ? new MvcHtmlString(" class=\"before-budget-start\"") : new MvcHtmlString(""))>
                        <td>@transaction.Date.ToString("dd/MM/yyyy")</td>
                        <td>@transaction.Category.Name</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Amount.ToString("#0.00")</td>
                        <td class="edit-column">@Html.ActionLink("Edit", "Edit", "Transactions", new { id = transaction.TransactionID }, null)</td>
                    </tr@()>
                    }
                </tbody>
            </table>
            
            Html.RenderPartial("MoreTransactionsLink", new MoreTransactionsViewModel { From = Model.From, Transactions = incomeTransactions }); 
            
        } else {
            
            <p>You haven't made any outgoing transactions during this period.</p>
            
        }
    </div>

    <!-- END INCOME TAB -->

    <!-- BEGIN EXPENSES TAB -->

    <div class="tab-pane@((Model.Tab == DashboardTab.Expenses) ? " active" : "")" id="expenses">

        <h2>@((Model.Budget != null) ? Model.Budget.Start.ToString("dd/MM/yy") + " - " + Model.Budget.End.ToString("dd/MM/yy") : "")</h2>

        @using (Html.BeginForm("CreateTransaction", "Home")) {
            <div class="row">
                <div class="span2">@Html.EditorFor(x => x.Date, new { @class = "input-block-level", placeholder = "Date" })</div>
                <div class="span2">@Html.DropDownListFor(x => x.Category_CategoryID, Model.ExpenseCategories, "Category...", new { @class = "input-block-level" })</div>
                <div class="span4">@Html.TextBoxFor(x => x.Description, new { @class = "typeahead input-block-level", placeholder = "Description (optional)", autocomplete = "off" })</div>
                <div class="span2">@Html.TextBoxFor(x => x.Amount, new { @class = "input-block-level", placeholder = "Amount" })</div>   
                <div class="span2">
                    <input type="submit" value="Add Expense" class="btn btn-primary btn-fullwidth" />
                </div>
                @Html.HiddenFor(x => x.Account_AccountID)
                <input data-val="true" data-val-required="The Type field is required." name="Type" type="hidden" value="Expense">
            </div>
        }
        @{
            var expenseTransactions = Model.Transactions.Where(t => t.Amount < 0).OrderByDescending(x => x.Date).ThenByDescending(x => x.TransactionID).Take(10);
        }
        @if (expenseTransactions.Count() > 0) {
            
            <table class="table table-striped">
                <caption>Transaction List</caption>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th class="edit-column">Edit</th>
                    </tr>
                </thead>
                <tbody>
                
                    @foreach (var transaction in expenseTransactions) {
                    <tr@((transaction.Date < Model.From) ? new MvcHtmlString(" class=\"before-budget-start\"") : new MvcHtmlString(""))>
                        <td>@transaction.Date.ToString("dd/MM/yyyy")</td>
                        <td>@transaction.Category.Name</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Amount.ToString("#0.00")</td>
                        <td class="edit-column">@Html.ActionLink("Edit", "Edit", "Transactions", new { id = transaction.TransactionID }, null)</td>
                    </tr>
                    }
                </tbody>
            </table>
            
            Html.RenderPartial("MoreTransactionsLink", new MoreTransactionsViewModel { From = Model.From, Transactions = expenseTransactions }); 
            
        } else {
            
            <p>You haven't made any outgoing transactions during this period.</p>
            
        }
    </div>    

    <!-- END EXPENSES TAB -->

    <!-- BEGIN TRANSFERS TAB -->

    <div class="tab-pane@((Model.Tab == DashboardTab.Transfers) ? " active" : "")" id="transfers">

        <h2>@((Model.Budget != null) ? Model.Budget.Start.ToString("dd/MM/yy") + " - " + Model.Budget.End.ToString("dd/MM/yy") : "")</h2>

        @using (Html.BeginForm("CreateTransfer", "Home")) {
            <div class="row">
                <div class="span2">@Html.EditorFor(x => x.Date, new { @class = "input-block-level", placeholder = "Date" })</div>
                <div class="span3">@Html.DropDownListFor(x => x.SourceAccountID, Model.Accounts, "Source...", new { @class = "input-block-level" })</div>
                <div class="span3">@Html.DropDownListFor(x => x.DestinationAccountID, Model.Accounts, "Destination...", new { @class = "input-block-level" })</div>
                <div class="span2">@Html.TextBoxFor(x => x.Amount, new { @class = "input-block-level", placeholder = "Amount" })</div>   
                <div class="span2">
                    <input type="submit" value="Transfer Funds" class="btn btn-primary btn-fullwidth" />
                </div>
                @Html.HiddenFor(x => x.Account_AccountID)
                <input data-val="true" data-val-required="The Type field is required." name="Type" type="hidden" value="Transfer">
            </div>
        }

        @{
            var transferTransactions = Model.Transactions.Where(t => t.TransferGUID != null).OrderByDescending(x => x.Date).ThenByDescending(x => x.TransactionID).Take(10);
        }
        @if(transferTransactions.Count() > 0) {
            
            <table class="table table-striped">
                <caption>Transaction List</caption>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th class="edit-column">Edit</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transferTransactions) {
                    <tr@((transaction.Date < Model.From) ? new MvcHtmlString(" class=\"before-budget-start\"") : new MvcHtmlString(""))>
                        <td>@transaction.Date.ToString("dd/MM/yyyy")</td>
                        <td>@transaction.Category.Name</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Amount.ToString("#0.00")</td>
                        <td class="edit-column">@Html.ActionLink("Edit", "Edit", "Transactions", new { id = transaction.TransactionID }, null)</td>
                    </tr>
                    }
                </tbody>
            </table>
            
            Html.RenderPartial("MoreTransactionsLink", new MoreTransactionsViewModel { From = Model.From, Transactions = transferTransactions });
            
        } else {
            
            <p>You haven't made any transfers during this period.</p>
            
        }
    </div>    

    <!-- END TRANSFERS TAB -->

    <!-- BEGIN BUDGET TAB -->

    @if(Model.Account.Type == AccountTypeDTO.Current) {
        
    <div class="tab-pane@((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? " active" : "")" id="budget">

        @if (Model.Budget == null) {
            if(Model.BudgetCount == 0) { 
            
                <h1>Create your first budget</h1>
            
            } else {
            
                <h1>It's time to create a new budget</h1>
            
                <p>Your previous budget period has ended. Create a new one below!</p>
            }   
        }

        @if (Model.Budget != null) {
            
            <h2>@((Model.Budget != null) ? Model.Budget.Start.ToString("dd/MM/yy") + " - " + Model.Budget.End.ToString("dd/MM/yy") : "")</h2>
            
            Html.RenderPartial("~/Views/Budgets/BudgetGraph.cshtml", Model.Budget.Category_Budgets);
        }

        <div class="row button-row">
            <div class="span3">
                
            </div>
            <div class="span6">&nbsp;</div>
            <div class="span3">
                @if (Model.Budget != null) {
                    @Html.ActionLink("Edit this budget", "Edit", "Budgets", new { id = Model.Budget.BudgetID }, new { @class = "btn btn-primary input-block-level" })
                } else {
                    @Html.ActionLink("Add a new budget", "Create", "Budgets", new { id = Model.Account_AccountID }, new { @class = "btn btn-primary input-block-level pull-right" })
                }
            </div>
        </div>

    </div>
        
    }

    <!-- END BUDGET TAB -->

    <!-- BEGIN PAYMENT CALC TAB -->

    @if(Model.Account.Type == AccountTypeDTO.CreditCard || Model.Account.Type == AccountTypeDTO.Loan) {
        
    <div class="tab-pane@((Model.Tab == DashboardTab.BudgetOrPaymentCalc) ? " active" : "")" id="payment-calculator"> 
        
        <form action="">
            <div class="row">
                <div class="span2"><label class="inline-label" for="payment-calculator-currentbalance">Balance:</label></div>
                <div class="span2"><label class="inline-label" for="payment-calculator-paymentamount">Monthly Payment:</label></div>
                <div class="span2"><label class="inline-label" for="payment-calculator-interestrate">Interest Rate (%):</label></div>
                <div class="span2"><label class="inline-label" for="payment-calculator-minpaymentpercentage">Min. Payment (%):</label></div>
                <div class="span4">&nbsp;</div>
            </div>
            <div class="row">
                <div class="span2"><input class="input-block-level" id="payment-calculator-currentbalance" name="payment-calculator-currentbalance" type="text" value="@Math.Abs(Model.Account.CurrentBalance).ToString("#0.00")"></div>
                <div class="span2"><input class="input-block-level" id="payment-calculator-paymentamount" name="payment-calculator-paymentamount" type="text" value="200"></div>
                <div class="span2"><input class="input-block-level" id="payment-calculator-interestrate" name="payment-calculator-interestrate" type="text" value="16.9"></div>
                <div class="span2"><input class="input-block-level" id="payment-calculator-minpaymentpercentage" name="payment-calculator-currentbalance" type="text" value="3"></div>
                <div class="span2">&nbsp;</div>
                <div class="span2">
                    <input type="button" id="payment-calculator-recalculate" value="Recalculate" class="btn btn-primary btn-fullwidth" />
                </div>
            </div>
        </form>

        <table class="table table-striped" id="payment-calculator-table">
            <caption>Transaction List</caption>
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Balance at Month Start</th>
                    <th>Interest</th>
                    <th>Min Payment</th>
                    <th>Actual Payment</th>
                    <th>Balance at Month End</th>
                </tr>
            </thead>
            <tbody>
                
            </tbody>
        </table>

    </div>
        
    }

    <!-- END PAYMENT CALC TAB -->

 <p></p>

@* <div class="row" id="test">
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
    <div class="span1">&nbsp;</div>
</div>*@

